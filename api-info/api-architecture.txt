# API-FOOTBALL Architecture

*Countries*, *Seasons* {
  *Leagues* {
    Fixtures {
      H2H,
      Live,
      Predictions,
      Events,
      Lineups,
      Matches_Statistics,
      Player_Statistics
    },
    Odds {
      Bookmakers,
      Labels
    },
    *Teams* {
      *Players* {
        *Player_Statistics*,
        Players_Transfers,
        Trophies,
        Sidelined
      }, 
      Coaches {
        Trophies,
        Sidelined
      },
      Players_Transfers,
      Team_Statistics
    },
    Top_Scorers,
    Standings
  }
}

# Calls to make

/status - grabs token *deprecated for some reason*
  token = response.get("api").get("status").get("token")

/seasons - grabs all seaons, take current season
  season = int(response.get("api").get("seasons")[-1])

/leagues/season/<season> - grabs all leagues by season (prem id for the 2019 season is 524)
  leagues = response.get("leagues")
  # populate league class
  for league in leagues:
    if league.get("name") == "Premier League":
      # instantiate league object
      id = int(league.get("league_id"))
      logo_url  = league.get("logo")
      country   = league.get("country")
      season    = league.get("season")
      name      = league.get("name")

/teams/league/<league_id> (Tottenham id for 2019 premier league season is 47)
  teams = response.get("api").get("teams")
  # populate team class
  for team in teams:
      # instantiate team object
      league_name = league_name
      league_id   = league_id
      logo_url    = team.get("logo")
      name        = team.get("name")
      id          = int(team.get("team_id"))

/players/team/<team_id>/f"{<season>}-{str(<season>+1)}"
  players = response.get("api").get("players")
  # populate player class
  for player in players:
    height_inches = float(player.get("height")[-3])*0.3937008
    nationality   = player.get("nationality")
    height_str    = f"{height_in // 12}\' {round(height_in % 12)}\"" 
    league_name   = player.get("league")
    league_id     = int(player.get("league_id"))
    firstname     = player.get("firstname")
    team_name     = player.get("team_name")
    lastname      = player.get("firstname")
    position      = player.get("position")
    injured       = player.get("injured")
    captain       = bool(player.get("captain"))
    team_id       = int(player.get("team_id"))
    number        = int(player.get("number"))
    weight        = int(player.get("weight")[-3])
    rating        = round(float(player.get("rating")), 1)
    name          = f"{player_firstname} {player_lastname}"
    age           = int(player.get("age"))
    id            = int(player.get("player_id"))
    # instantiate statistics dictionary
    stats = {
      'shots': {
        'totals': int(player.get("shots").get("total")),
        'on': int(player.get("shots").get("on")),
      },
      'goals': {
        'total': int(player.get("goals").get("total")),
        'conceded': int(player.get("goals").get("conceded")),
        'assists': int(player.get("goals").get("assists"))
      },
      'passes': {
        'total': int(player.get("passes").get("total")),
        'key': int(player.get("passes").get("key")),
        'accuracy': float(player.get("passes").get("accuracy"))
      },
      'tackles': {
        'total': int(player.get("tackles").get("total")),
        'blocks': int(player.get("tackles").get("blocks")),
        'interceptions': float(player.get("tackles").get("interceptions"))
      },
      'duels': {
        'total': int(player.get("duels").get("total")),
        'won': int(player.get("duels").get("won")),
        'percentage": round(float(player.get("duels").get("won"))/float(player.get("duels").get("total")), 1)
      },
      'dribbles': {
        'attempts': int(player.get("dribbles").get("attempts")),
        'successes': int(player.get("dribbles").get("successes")),
        'percentage": round(float(player.get("dribbles").get("successes"))/float(player.get("dribbles").get("attempts")), 1)
      },
      'fouls': {
        'drawn': int(player.get("fouls").get("drawn")),
        'committed': int(player.get("fouls").get("committed"))
      },
      'cards': {
        'yellow': int(player.get("cards").get("yellow")),
        'yellowred': int(player.get("cards").get("yellowred")),
        'red': int(player.get("cards").get("red"))
      },
      'penalty': {
        'won': int(player.get("penalty").get("won"),
        'commited': int(player.get("penalty").get("commited"),
        'success': int(player.get("penalty").get("success"),
        'missed': int(player.get("penalty").get("missed"),
        'saved': int(player.get("penalty").get("saved")
      },
      'games': {
        'appearences': int(player.get("games").get("appearences"),
        'minutes_played': int(player.get("games").get("minutes_played"),
        'lineups': int(player.get("games").get("success")
      },
      'substitutes': {
        'in': int(player.get("substitutes").get("in"),
        'out': int(player.get("substitutes").get("out"),
        'bench': int(player.get("substitutes").get("bench")
      }
    }
